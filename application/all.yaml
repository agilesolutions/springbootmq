---
apiVersion: v1
kind: Namespace
metadata:
  name: jenkins
  labels:
    app: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-schedule
  namespace: jenkins
  labels:
    app: jenkins
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "pods/log", "persistentvolumeclaims", "configmaps"]
  verbs: ["*"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-schedule
  namespace: jenkins
  labels:
    app: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-schedule
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "jenkins"
  namespace: "jenkins"
  labels:
    chart: 'jenkins'
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: "jenkins"
    spec:
#      securityContext:
#        runAsUser: 0
      containers:
      - name: "jenkins"
        image: "jenkins/jenkins:latest"
#        image: "jenkinsci/blueocean:latest"
        securityContext:
          runAsUser: 0
          privileged: true
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: "200m"
            memory: "300Mi"
#        volumeMounts:
#          -
#            mountPath: /var/run/docker.sock
#            name: "dockersock"
#            readOnly: false
        env:
          - name: PORT
            value : "8080"
#      volumes:
#      - name: dockersock
#        hostPath:
#          path: /var/run/docker.sock
#          type: File
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-svc
  namespace: jenkins
  labels:
    app: jenkins
spec:
  type: LoadBalancer
  ports:
  - port: 8080
    nodePort: 30080
  selector:
    app: jenkins
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
spec:
  rules:
    - host: 'jenkins'
      http:
        paths:
          - path: '/'
            backend:
              serviceName: jenkins
              servicePort: http
